{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "Placeholder",
  "type": "object",
  "properties": {
    "center": {
      "description": "Items to be displayed in the toolbar",
      "type": "array",
      "default": [],
      "items": {
        "$ref": "#/$defs/ToolbarItem2"
      }
    },
    "isReorderDisabled": {
      "description": "Whether the reordering possible on the toolbar",
      "type": "boolean",
      "default": false
    },
    "left": {
      "description": "Items to be displayed in the toolbar",
      "type": "array",
      "default": [],
      "items": {
        "$ref": "#/$defs/ToolbarItem2"
      }
    },
    "right": {
      "description": "Items to be displayed in the toolbar",
      "type": "array",
      "default": [],
      "items": {
        "$ref": "#/$defs/ToolbarItem2"
      }
    }
  },
  "$defs": {
    "BluetoothToolbarItem": {
      "type": "object",
      "properties": {
        "badge": {
          "description": "Badge will be displayed over the item, useful as notifications.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Bluetooth Item Scope\n```ts\ninterface BluetoothDevice\n{\n    id: string,\n    name: string,\n    address: bigint,\n    majorClass: BluetoothMajor,\n    minorMainClass: BluetoothMinor,\n    minorSubClass: BluetoothMinor,\n    connected: boolean,\n    paired: boolean,\n    canPair: boolean,\n    isBluetoothLoweenergy: boolean,\n    iconPath: string,\n}\n\ntype BluetoothMajor = \"Miscellaneous\" | \"Computer\" | \"Phone\" | \"NetworkAccessPoint\" | \"AudioVideo\" | \"Peripheral\" | \"Imaging\" | \"Wearable\" | \"Toy\" | \"Health\" | \"Unkown\";\n\ntype BluetoothMinor = \"Uncategorized\" | \"ComputerDesktop\" | \"ComputerServer\" | \"ComputerLaptop\" | \"ComputerHandheld\" | \"ComputerPalmSize\" | \"ComputerWearable\" | \"ComputerTablet\"\n    | \"PhoneCellular\" | \"PhoneCordless\" | \"PhoneSmartPhone\" | \"PhoneWired\" | \"PhoneIsdn\" | \"NetworkFullyAvailable\" | \"NetworkUsed01To17Percent\" | \"NetworkUsed17To33Percent\" | \"NetworkUsed33To50Percent\"\n    | \"NetworkUsed50To67Percent\" | \"NetworkUsed67To83Percent\" | \"NetworkUsed83To99Percent\" | \"NetworkNoServiceAvailable\" | \"AudioVideoWearableHeadset\" | \"AudioVideoHandsFree\" | \"AudioVideoMicrophone\"\n    | \"AudioVideoLoudspeaker\" | \"AudioVideoHeadphones\" | \"AudioVideoPortableAudio\" | \"AudioVideoCarAudio\" | \"AudioVideoSetTopBox\" | \"AudioVideoHifiAudioDevice\" | \"AudioVideoVcr\" | \"AudioVideoVideoCamera\"\n    | \"AudioVideoCamcorder\" | \"AudioVideoVideoMonitor\" | \"AudioVideoVideoDisplayAndLoudspeaker\" | \"AudioVideoVideoConferencing\" | \"AudioVideoGamingOrToy\" | \"PeripheralJoystick\" | \"PeripheralGamepad\"\n    | \"PeripheralRemoteControl\" | \"PeripheralSensing\" | \"PeripheralDigitizerTablet\" | \"PeripheralCardReader\" | \"PeripheralDigitalPen\" | \"PeripheralHandheldScanner\" | \"PeripheralHandheldGesture\"\n    | \"WearableWristwatch\" | \"WearablePager\" | \"WearableJacket\" | \"WearableHelmet\" | \"WearableGlasses\" | \"ToyRobot\" | \"ToyVehicle\" | \"ToyDoll\" | \"ToyController\" | \"ToyGame\" | \"HealthBloodPressureMonitor\"\n    | \"HealthThermometer\" | \"HealthWeighingScale\" | \"HealthGlucoseMeter\" | \"HealthPulseOximeter\" | \"HealthHeartRateMonitor\" | \"HealthHealthDataDisplay\" | \"HealthStepCounter\" | \"HealthBodyCompositionAnalyzer\"\n    | \"HealthPeakFlowMonitor\" | \"HealthMedicationMonitor\" | \"HealthKneeProsthesis\" | \"HealthAnkleProsthesis\" | \"HealthGenericHealthManager\" | \"HealthPersonalMobilityDevice\" | \"PeripheralOther\" | \"PeripheralPointer\"\n    | \"PeripheralKeyboard\" | \"PeripheralKeyboardAndPointer\";\n\nconst bluetoothState: boolean;\nconst devices: BluetoothDevice[];\nconst connectedDevices: BluetoothDevice[];\n```",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "id": {
          "description": "Id to identify the item, should be unique.",
          "type": "string",
          "default": ""
        },
        "onClick": {
          "description": "Deprecated use `onClickV2` instead.",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "onClickV2": {
          "description": "This code will be parsed and executed when the item is clicked.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Bluetooth Item Scope\n```ts\ninterface BluetoothDevice\n{\n    id: string,\n    name: string,\n    address: bigint,\n    majorClass: BluetoothMajor,\n    minorMainClass: BluetoothMinor,\n    minorSubClass: BluetoothMinor,\n    connected: boolean,\n    paired: boolean,\n    canPair: boolean,\n    isBluetoothLoweenergy: boolean,\n    iconPath: string,\n}\n\ntype BluetoothMajor = \"Miscellaneous\" | \"Computer\" | \"Phone\" | \"NetworkAccessPoint\" | \"AudioVideo\" | \"Peripheral\" | \"Imaging\" | \"Wearable\" | \"Toy\" | \"Health\" | \"Unkown\";\n\ntype BluetoothMinor = \"Uncategorized\" | \"ComputerDesktop\" | \"ComputerServer\" | \"ComputerLaptop\" | \"ComputerHandheld\" | \"ComputerPalmSize\" | \"ComputerWearable\" | \"ComputerTablet\"\n    | \"PhoneCellular\" | \"PhoneCordless\" | \"PhoneSmartPhone\" | \"PhoneWired\" | \"PhoneIsdn\" | \"NetworkFullyAvailable\" | \"NetworkUsed01To17Percent\" | \"NetworkUsed17To33Percent\" | \"NetworkUsed33To50Percent\"\n    | \"NetworkUsed50To67Percent\" | \"NetworkUsed67To83Percent\" | \"NetworkUsed83To99Percent\" | \"NetworkNoServiceAvailable\" | \"AudioVideoWearableHeadset\" | \"AudioVideoHandsFree\" | \"AudioVideoMicrophone\"\n    | \"AudioVideoLoudspeaker\" | \"AudioVideoHeadphones\" | \"AudioVideoPortableAudio\" | \"AudioVideoCarAudio\" | \"AudioVideoSetTopBox\" | \"AudioVideoHifiAudioDevice\" | \"AudioVideoVcr\" | \"AudioVideoVideoCamera\"\n    | \"AudioVideoCamcorder\" | \"AudioVideoVideoMonitor\" | \"AudioVideoVideoDisplayAndLoudspeaker\" | \"AudioVideoVideoConferencing\" | \"AudioVideoGamingOrToy\" | \"PeripheralJoystick\" | \"PeripheralGamepad\"\n    | \"PeripheralRemoteControl\" | \"PeripheralSensing\" | \"PeripheralDigitizerTablet\" | \"PeripheralCardReader\" | \"PeripheralDigitalPen\" | \"PeripheralHandheldScanner\" | \"PeripheralHandheldGesture\"\n    | \"WearableWristwatch\" | \"WearablePager\" | \"WearableJacket\" | \"WearableHelmet\" | \"WearableGlasses\" | \"ToyRobot\" | \"ToyVehicle\" | \"ToyDoll\" | \"ToyController\" | \"ToyGame\" | \"HealthBloodPressureMonitor\"\n    | \"HealthThermometer\" | \"HealthWeighingScale\" | \"HealthGlucoseMeter\" | \"HealthPulseOximeter\" | \"HealthHeartRateMonitor\" | \"HealthHealthDataDisplay\" | \"HealthStepCounter\" | \"HealthBodyCompositionAnalyzer\"\n    | \"HealthPeakFlowMonitor\" | \"HealthMedicationMonitor\" | \"HealthKneeProsthesis\" | \"HealthAnkleProsthesis\" | \"HealthGenericHealthManager\" | \"HealthPersonalMobilityDevice\" | \"PeripheralOther\" | \"PeripheralPointer\"\n    | \"PeripheralKeyboard\" | \"PeripheralKeyboardAndPointer\";\n\nconst bluetoothState: boolean;\nconst devices: BluetoothDevice[];\nconst connectedDevices: BluetoothDevice[];\n```",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "remoteData": {
          "description": "Remote data to be added to the item scope.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/RemoteDataDeclaration"
          },
          "default": {}
        },
        "style": {
          "description": "Styles to be added to the item. This follow the same interface of React's `style` prop.",
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/$defs/StyleValue"
              },
              {
                "type": "null"
              }
            ]
          },
          "default": {}
        },
        "template": {
          "description": "Content to display in the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Bluetooth Item Scope\n```ts\ninterface BluetoothDevice\n{\n    id: string,\n    name: string,\n    address: bigint,\n    majorClass: BluetoothMajor,\n    minorMainClass: BluetoothMinor,\n    minorSubClass: BluetoothMinor,\n    connected: boolean,\n    paired: boolean,\n    canPair: boolean,\n    isBluetoothLoweenergy: boolean,\n    iconPath: string,\n}\n\ntype BluetoothMajor = \"Miscellaneous\" | \"Computer\" | \"Phone\" | \"NetworkAccessPoint\" | \"AudioVideo\" | \"Peripheral\" | \"Imaging\" | \"Wearable\" | \"Toy\" | \"Health\" | \"Unkown\";\n\ntype BluetoothMinor = \"Uncategorized\" | \"ComputerDesktop\" | \"ComputerServer\" | \"ComputerLaptop\" | \"ComputerHandheld\" | \"ComputerPalmSize\" | \"ComputerWearable\" | \"ComputerTablet\"\n    | \"PhoneCellular\" | \"PhoneCordless\" | \"PhoneSmartPhone\" | \"PhoneWired\" | \"PhoneIsdn\" | \"NetworkFullyAvailable\" | \"NetworkUsed01To17Percent\" | \"NetworkUsed17To33Percent\" | \"NetworkUsed33To50Percent\"\n    | \"NetworkUsed50To67Percent\" | \"NetworkUsed67To83Percent\" | \"NetworkUsed83To99Percent\" | \"NetworkNoServiceAvailable\" | \"AudioVideoWearableHeadset\" | \"AudioVideoHandsFree\" | \"AudioVideoMicrophone\"\n    | \"AudioVideoLoudspeaker\" | \"AudioVideoHeadphones\" | \"AudioVideoPortableAudio\" | \"AudioVideoCarAudio\" | \"AudioVideoSetTopBox\" | \"AudioVideoHifiAudioDevice\" | \"AudioVideoVcr\" | \"AudioVideoVideoCamera\"\n    | \"AudioVideoCamcorder\" | \"AudioVideoVideoMonitor\" | \"AudioVideoVideoDisplayAndLoudspeaker\" | \"AudioVideoVideoConferencing\" | \"AudioVideoGamingOrToy\" | \"PeripheralJoystick\" | \"PeripheralGamepad\"\n    | \"PeripheralRemoteControl\" | \"PeripheralSensing\" | \"PeripheralDigitizerTablet\" | \"PeripheralCardReader\" | \"PeripheralDigitalPen\" | \"PeripheralHandheldScanner\" | \"PeripheralHandheldGesture\"\n    | \"WearableWristwatch\" | \"WearablePager\" | \"WearableJacket\" | \"WearableHelmet\" | \"WearableGlasses\" | \"ToyRobot\" | \"ToyVehicle\" | \"ToyDoll\" | \"ToyController\" | \"ToyGame\" | \"HealthBloodPressureMonitor\"\n    | \"HealthThermometer\" | \"HealthWeighingScale\" | \"HealthGlucoseMeter\" | \"HealthPulseOximeter\" | \"HealthHeartRateMonitor\" | \"HealthHealthDataDisplay\" | \"HealthStepCounter\" | \"HealthBodyCompositionAnalyzer\"\n    | \"HealthPeakFlowMonitor\" | \"HealthMedicationMonitor\" | \"HealthKneeProsthesis\" | \"HealthAnkleProsthesis\" | \"HealthGenericHealthManager\" | \"HealthPersonalMobilityDevice\" | \"PeripheralOther\" | \"PeripheralPointer\"\n    | \"PeripheralKeyboard\" | \"PeripheralKeyboardAndPointer\";\n\nconst bluetoothState: boolean;\nconst devices: BluetoothDevice[];\nconst connectedDevices: BluetoothDevice[];\n```",
          "type": "string",
          "default": ""
        },
        "tooltip": {
          "description": "Content to display in tooltip of the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Bluetooth Item Scope\n```ts\ninterface BluetoothDevice\n{\n    id: string,\n    name: string,\n    address: bigint,\n    majorClass: BluetoothMajor,\n    minorMainClass: BluetoothMinor,\n    minorSubClass: BluetoothMinor,\n    connected: boolean,\n    paired: boolean,\n    canPair: boolean,\n    isBluetoothLoweenergy: boolean,\n    iconPath: string,\n}\n\ntype BluetoothMajor = \"Miscellaneous\" | \"Computer\" | \"Phone\" | \"NetworkAccessPoint\" | \"AudioVideo\" | \"Peripheral\" | \"Imaging\" | \"Wearable\" | \"Toy\" | \"Health\" | \"Unkown\";\n\ntype BluetoothMinor = \"Uncategorized\" | \"ComputerDesktop\" | \"ComputerServer\" | \"ComputerLaptop\" | \"ComputerHandheld\" | \"ComputerPalmSize\" | \"ComputerWearable\" | \"ComputerTablet\"\n    | \"PhoneCellular\" | \"PhoneCordless\" | \"PhoneSmartPhone\" | \"PhoneWired\" | \"PhoneIsdn\" | \"NetworkFullyAvailable\" | \"NetworkUsed01To17Percent\" | \"NetworkUsed17To33Percent\" | \"NetworkUsed33To50Percent\"\n    | \"NetworkUsed50To67Percent\" | \"NetworkUsed67To83Percent\" | \"NetworkUsed83To99Percent\" | \"NetworkNoServiceAvailable\" | \"AudioVideoWearableHeadset\" | \"AudioVideoHandsFree\" | \"AudioVideoMicrophone\"\n    | \"AudioVideoLoudspeaker\" | \"AudioVideoHeadphones\" | \"AudioVideoPortableAudio\" | \"AudioVideoCarAudio\" | \"AudioVideoSetTopBox\" | \"AudioVideoHifiAudioDevice\" | \"AudioVideoVcr\" | \"AudioVideoVideoCamera\"\n    | \"AudioVideoCamcorder\" | \"AudioVideoVideoMonitor\" | \"AudioVideoVideoDisplayAndLoudspeaker\" | \"AudioVideoVideoConferencing\" | \"AudioVideoGamingOrToy\" | \"PeripheralJoystick\" | \"PeripheralGamepad\"\n    | \"PeripheralRemoteControl\" | \"PeripheralSensing\" | \"PeripheralDigitizerTablet\" | \"PeripheralCardReader\" | \"PeripheralDigitalPen\" | \"PeripheralHandheldScanner\" | \"PeripheralHandheldGesture\"\n    | \"WearableWristwatch\" | \"WearablePager\" | \"WearableJacket\" | \"WearableHelmet\" | \"WearableGlasses\" | \"ToyRobot\" | \"ToyVehicle\" | \"ToyDoll\" | \"ToyController\" | \"ToyGame\" | \"HealthBloodPressureMonitor\"\n    | \"HealthThermometer\" | \"HealthWeighingScale\" | \"HealthGlucoseMeter\" | \"HealthPulseOximeter\" | \"HealthHeartRateMonitor\" | \"HealthHealthDataDisplay\" | \"HealthStepCounter\" | \"HealthBodyCompositionAnalyzer\"\n    | \"HealthPeakFlowMonitor\" | \"HealthMedicationMonitor\" | \"HealthKneeProsthesis\" | \"HealthAnkleProsthesis\" | \"HealthGenericHealthManager\" | \"HealthPersonalMobilityDevice\" | \"PeripheralOther\" | \"PeripheralPointer\"\n    | \"PeripheralKeyboard\" | \"PeripheralKeyboardAndPointer\";\n\nconst bluetoothState: boolean;\nconst devices: BluetoothDevice[];\nconst connectedDevices: BluetoothDevice[];\n```",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "withBluetoothSelector": {
          "description": "Show bluetooth selector popup on click]",
          "type": "boolean",
          "default": false
        }
      }
    },
    "DateToolbarItem": {
      "type": "object",
      "properties": {
        "badge": {
          "description": "Badge will be displayed over the item, useful as notifications.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Date Item Scope\n```ts\nconst date: string; // the formatted date\n```",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "id": {
          "description": "Id to identify the item, should be unique.",
          "type": "string",
          "default": ""
        },
        "onClick": {
          "description": "Deprecated use `onClickV2` instead.",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "onClickV2": {
          "description": "This code will be parsed and executed when the item is clicked.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Date Item Scope\n```ts\nconst date: string; // the formatted date\n```",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "remoteData": {
          "description": "Remote data to be added to the item scope.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/RemoteDataDeclaration"
          },
          "default": {}
        },
        "style": {
          "description": "Styles to be added to the item. This follow the same interface of React's `style` prop.",
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/$defs/StyleValue"
              },
              {
                "type": "null"
              }
            ]
          },
          "default": {}
        },
        "template": {
          "description": "Content to display in the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Date Item Scope\n```ts\nconst date: string; // the formatted date\n```",
          "type": "string",
          "default": ""
        },
        "tooltip": {
          "description": "Content to display in tooltip of the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Date Item Scope\n```ts\nconst date: string; // the formatted date\n```",
          "type": [
            "string",
            "null"
          ],
          "default": null
        }
      }
    },
    "DeviceToolbarItem": {
      "type": "object",
      "properties": {
        "badge": {
          "description": "Badge will be displayed over the item, useful as notifications.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Device Item Scope\nthis module does no expand the scope of the item",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "id": {
          "description": "Id to identify the item, should be unique.",
          "type": "string",
          "default": ""
        },
        "onClick": {
          "description": "Deprecated use `onClickV2` instead.",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "onClickV2": {
          "description": "This code will be parsed and executed when the item is clicked.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Device Item Scope\nthis module does no expand the scope of the item",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "remoteData": {
          "description": "Remote data to be added to the item scope.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/RemoteDataDeclaration"
          },
          "default": {}
        },
        "style": {
          "description": "Styles to be added to the item. This follow the same interface of React's `style` prop.",
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/$defs/StyleValue"
              },
              {
                "type": "null"
              }
            ]
          },
          "default": {}
        },
        "template": {
          "description": "Content to display in the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Device Item Scope\nthis module does no expand the scope of the item",
          "type": "string",
          "default": ""
        },
        "tooltip": {
          "description": "Content to display in tooltip of the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Device Item Scope\nthis module does no expand the scope of the item",
          "type": [
            "string",
            "null"
          ],
          "default": null
        }
      }
    },
    "GenericToolbarItem": {
      "type": "object",
      "properties": {
        "badge": {
          "description": "Badge will be displayed over the item, useful as notifications.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Generic Item Scope\n```ts\n// the current focused window\nconst window: {\n    name: string;\n    title: string;\n    exe: string | null;\n};\n```",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "id": {
          "description": "Id to identify the item, should be unique.",
          "type": "string",
          "default": ""
        },
        "onClick": {
          "description": "Deprecated use `onClickV2` instead.",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "onClickV2": {
          "description": "This code will be parsed and executed when the item is clicked.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Generic Item Scope\n```ts\n// the current focused window\nconst window: {\n    name: string;\n    title: string;\n    exe: string | null;\n};\n```",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "remoteData": {
          "description": "Remote data to be added to the item scope.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/RemoteDataDeclaration"
          },
          "default": {}
        },
        "style": {
          "description": "Styles to be added to the item. This follow the same interface of React's `style` prop.",
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/$defs/StyleValue"
              },
              {
                "type": "null"
              }
            ]
          },
          "default": {}
        },
        "template": {
          "description": "Content to display in the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Generic Item Scope\n```ts\n// the current focused window\nconst window: {\n    name: string;\n    title: string;\n    exe: string | null;\n};\n```",
          "type": "string",
          "default": ""
        },
        "tooltip": {
          "description": "Content to display in tooltip of the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Generic Item Scope\n```ts\n// the current focused window\nconst window: {\n    name: string;\n    title: string;\n    exe: string | null;\n};\n```",
          "type": [
            "string",
            "null"
          ],
          "default": null
        }
      }
    },
    "HwinfoToolbarItem": {
      "type": "object",
      "properties": {
        "badge": {
          "description": "Badge will be displayed over the item, useful as notifications.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Hwinfo Item Scope\nthis module does no expand the scope of the item",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "id": {
          "description": "Id to identify the item, should be unique.",
          "type": "string",
          "default": ""
        },
        "onClick": {
          "description": "Deprecated use `onClickV2` instead.",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "onClickV2": {
          "description": "This code will be parsed and executed when the item is clicked.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Hwinfo Item Scope\nthis module does no expand the scope of the item",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "remoteData": {
          "description": "Remote data to be added to the item scope.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/RemoteDataDeclaration"
          },
          "default": {}
        },
        "sensors": {
          "description": "Sensors to query from the system",
          "type": "array",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "style": {
          "description": "Styles to be added to the item. This follow the same interface of React's `style` prop.",
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/$defs/StyleValue"
              },
              {
                "type": "null"
              }
            ]
          },
          "default": {}
        },
        "template": {
          "description": "Content to display in the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Hwinfo Item Scope\nthis module does no expand the scope of the item",
          "type": "string",
          "default": ""
        },
        "tooltip": {
          "description": "Content to display in tooltip of the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Hwinfo Item Scope\nthis module does no expand the scope of the item",
          "type": [
            "string",
            "null"
          ],
          "default": null
        }
      }
    },
    "KeyboardToolbarItem": {
      "type": "object",
      "properties": {
        "badge": {
          "description": "Badge will be displayed over the item, useful as notifications.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Keyboard Item Scope\n```ts\ninterface KeyboardLayout {\n  id: string;\n  handle: string;\n  displayName: string;\n  active: boolean;\n}\n\ninterface SystemLanguage {\n  id: string;\n  code: string;\n  name: string;\n  nativeName: string;\n  inputMethods: KeyboardLayout[];\n}\n\nconst languages: Language[];\nconst activeLang: Language;\nconst activeKeyboard: KeyboardLayout;\nconst activeLangPrefix: string;\nconst activeKeyboardPrefix: string;\n```",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "id": {
          "description": "Id to identify the item, should be unique.",
          "type": "string",
          "default": ""
        },
        "onClick": {
          "description": "Deprecated use `onClickV2` instead.",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "onClickV2": {
          "description": "This code will be parsed and executed when the item is clicked.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Keyboard Item Scope\n```ts\ninterface KeyboardLayout {\n  id: string;\n  handle: string;\n  displayName: string;\n  active: boolean;\n}\n\ninterface SystemLanguage {\n  id: string;\n  code: string;\n  name: string;\n  nativeName: string;\n  inputMethods: KeyboardLayout[];\n}\n\nconst languages: Language[];\nconst activeLang: Language;\nconst activeKeyboard: KeyboardLayout;\nconst activeLangPrefix: string;\nconst activeKeyboardPrefix: string;\n```",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "remoteData": {
          "description": "Remote data to be added to the item scope.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/RemoteDataDeclaration"
          },
          "default": {}
        },
        "style": {
          "description": "Styles to be added to the item. This follow the same interface of React's `style` prop.",
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/$defs/StyleValue"
              },
              {
                "type": "null"
              }
            ]
          },
          "default": {}
        },
        "template": {
          "description": "Content to display in the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Keyboard Item Scope\n```ts\ninterface KeyboardLayout {\n  id: string;\n  handle: string;\n  displayName: string;\n  active: boolean;\n}\n\ninterface SystemLanguage {\n  id: string;\n  code: string;\n  name: string;\n  nativeName: string;\n  inputMethods: KeyboardLayout[];\n}\n\nconst languages: Language[];\nconst activeLang: Language;\nconst activeKeyboard: KeyboardLayout;\nconst activeLangPrefix: string;\nconst activeKeyboardPrefix: string;\n```",
          "type": "string",
          "default": ""
        },
        "tooltip": {
          "description": "Content to display in tooltip of the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Keyboard Item Scope\n```ts\ninterface KeyboardLayout {\n  id: string;\n  handle: string;\n  displayName: string;\n  active: boolean;\n}\n\ninterface SystemLanguage {\n  id: string;\n  code: string;\n  name: string;\n  nativeName: string;\n  inputMethods: KeyboardLayout[];\n}\n\nconst languages: Language[];\nconst activeLang: Language;\nconst activeKeyboard: KeyboardLayout;\nconst activeLangPrefix: string;\nconst activeKeyboardPrefix: string;\n```",
          "type": [
            "string",
            "null"
          ],
          "default": null
        }
      }
    },
    "MediaToolbarItem": {
      "type": "object",
      "properties": {
        "badge": {
          "description": "Badge will be displayed over the item, useful as notifications.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Media Item Scope\n```ts\nconst volume: number; // output master volume from 0 to 1\nconst isMuted: boolean; // output master volume is muted\nconst inputVolume: number; // input master volume from 0 to 1\nconst inputIsMuted: boolean; // input master volume is muted\n\ninterface MediaSession {\n    id: string;\n    title: string;\n    author: string;\n    thumbnail: string | null; // path to temporal media session image\n    playing: boolean;\n    default: boolean;\n    owner: {\n        name: string;\n        iconPath: string | null;\n    } | null;\n}\n\nconst mediaSession: MediaSession | null;\n```",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "id": {
          "description": "Id to identify the item, should be unique.",
          "type": "string",
          "default": ""
        },
        "onClick": {
          "description": "Deprecated use `onClickV2` instead.",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "onClickV2": {
          "description": "This code will be parsed and executed when the item is clicked.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Media Item Scope\n```ts\nconst volume: number; // output master volume from 0 to 1\nconst isMuted: boolean; // output master volume is muted\nconst inputVolume: number; // input master volume from 0 to 1\nconst inputIsMuted: boolean; // input master volume is muted\n\ninterface MediaSession {\n    id: string;\n    title: string;\n    author: string;\n    thumbnail: string | null; // path to temporal media session image\n    playing: boolean;\n    default: boolean;\n    owner: {\n        name: string;\n        iconPath: string | null;\n    } | null;\n}\n\nconst mediaSession: MediaSession | null;\n```",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "remoteData": {
          "description": "Remote data to be added to the item scope.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/RemoteDataDeclaration"
          },
          "default": {}
        },
        "style": {
          "description": "Styles to be added to the item. This follow the same interface of React's `style` prop.",
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/$defs/StyleValue"
              },
              {
                "type": "null"
              }
            ]
          },
          "default": {}
        },
        "template": {
          "description": "Content to display in the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Media Item Scope\n```ts\nconst volume: number; // output master volume from 0 to 1\nconst isMuted: boolean; // output master volume is muted\nconst inputVolume: number; // input master volume from 0 to 1\nconst inputIsMuted: boolean; // input master volume is muted\n\ninterface MediaSession {\n    id: string;\n    title: string;\n    author: string;\n    thumbnail: string | null; // path to temporal media session image\n    playing: boolean;\n    default: boolean;\n    owner: {\n        name: string;\n        iconPath: string | null;\n    } | null;\n}\n\nconst mediaSession: MediaSession | null;\n```",
          "type": "string",
          "default": ""
        },
        "tooltip": {
          "description": "Content to display in tooltip of the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Media Item Scope\n```ts\nconst volume: number; // output master volume from 0 to 1\nconst isMuted: boolean; // output master volume is muted\nconst inputVolume: number; // input master volume from 0 to 1\nconst inputIsMuted: boolean; // input master volume is muted\n\ninterface MediaSession {\n    id: string;\n    title: string;\n    author: string;\n    thumbnail: string | null; // path to temporal media session image\n    playing: boolean;\n    default: boolean;\n    owner: {\n        name: string;\n        iconPath: string | null;\n    } | null;\n}\n\nconst mediaSession: MediaSession | null;\n```",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "withMediaControls": {
          "description": "Show media controls popup on click",
          "type": "boolean",
          "default": false
        }
      }
    },
    "NetworkToolbarItem": {
      "type": "object",
      "properties": {
        "badge": {
          "description": "Badge will be displayed over the item, useful as notifications.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Network Item Scope\n```ts\ninterface NetworkInterface {\n    name: string;\n    description: string;\n    status: 'up' | 'down';\n    dnsSuffix: string;\n    type: string;\n    gateway: string | null;\n    mac: string;\n    ipv4: string | null;\n    ipv6: string | null;\n}\nconst online: boolean;\nconst interfaces: NetworkInterface[];\nconst usingInterface: NetworkInterface | null;\n```",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "id": {
          "description": "Id to identify the item, should be unique.",
          "type": "string",
          "default": ""
        },
        "onClick": {
          "description": "Deprecated use `onClickV2` instead.",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "onClickV2": {
          "description": "This code will be parsed and executed when the item is clicked.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Network Item Scope\n```ts\ninterface NetworkInterface {\n    name: string;\n    description: string;\n    status: 'up' | 'down';\n    dnsSuffix: string;\n    type: string;\n    gateway: string | null;\n    mac: string;\n    ipv4: string | null;\n    ipv6: string | null;\n}\nconst online: boolean;\nconst interfaces: NetworkInterface[];\nconst usingInterface: NetworkInterface | null;\n```",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "remoteData": {
          "description": "Remote data to be added to the item scope.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/RemoteDataDeclaration"
          },
          "default": {}
        },
        "style": {
          "description": "Styles to be added to the item. This follow the same interface of React's `style` prop.",
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/$defs/StyleValue"
              },
              {
                "type": "null"
              }
            ]
          },
          "default": {}
        },
        "template": {
          "description": "Content to display in the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Network Item Scope\n```ts\ninterface NetworkInterface {\n    name: string;\n    description: string;\n    status: 'up' | 'down';\n    dnsSuffix: string;\n    type: string;\n    gateway: string | null;\n    mac: string;\n    ipv4: string | null;\n    ipv6: string | null;\n}\nconst online: boolean;\nconst interfaces: NetworkInterface[];\nconst usingInterface: NetworkInterface | null;\n```",
          "type": "string",
          "default": ""
        },
        "tooltip": {
          "description": "Content to display in tooltip of the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Network Item Scope\n```ts\ninterface NetworkInterface {\n    name: string;\n    description: string;\n    status: 'up' | 'down';\n    dnsSuffix: string;\n    type: string;\n    gateway: string | null;\n    mac: string;\n    ipv4: string | null;\n    ipv6: string | null;\n}\nconst online: boolean;\nconst interfaces: NetworkInterface[];\nconst usingInterface: NetworkInterface | null;\n```",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "withWlanSelector": {
          "description": "Show Wi-fi selector popup on click]",
          "type": "boolean",
          "default": false
        }
      }
    },
    "NotificationsToolbarItem": {
      "type": "object",
      "properties": {
        "badge": {
          "description": "Badge will be displayed over the item, useful as notifications.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Notifications Item Scope\n```ts\nconst count: number;\n```",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "id": {
          "description": "Id to identify the item, should be unique.",
          "type": "string",
          "default": ""
        },
        "onClick": {
          "description": "Deprecated use `onClickV2` instead.",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "onClickV2": {
          "description": "This code will be parsed and executed when the item is clicked.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Notifications Item Scope\n```ts\nconst count: number;\n```",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "remoteData": {
          "description": "Remote data to be added to the item scope.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/RemoteDataDeclaration"
          },
          "default": {}
        },
        "style": {
          "description": "Styles to be added to the item. This follow the same interface of React's `style` prop.",
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/$defs/StyleValue"
              },
              {
                "type": "null"
              }
            ]
          },
          "default": {}
        },
        "template": {
          "description": "Content to display in the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Notifications Item Scope\n```ts\nconst count: number;\n```",
          "type": "string",
          "default": ""
        },
        "tooltip": {
          "description": "Content to display in tooltip of the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Notifications Item Scope\n```ts\nconst count: number;\n```",
          "type": [
            "string",
            "null"
          ],
          "default": null
        }
      }
    },
    "PluginId": {
      "description": "Visual id composed of the creator username and the resource name. e.g. `@username/resource-name`",
      "$ref": "#/$defs/ResourceId"
    },
    "PowerToolbarItem": {
      "type": "object",
      "properties": {
        "badge": {
          "description": "Badge will be displayed over the item, useful as notifications.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Power Item Scope\n```ts\ninterface PowerStatus {\n    acLineStatus: number;\n    batteryFlag: number;\n    batteryLifePercent: number;\n    systemStatusFlag: number;\n    batteryLifeTime: number;\n    batteryFullLifeTime: number;\n}\n\nenum PowerPlan {\n  Balanced = 'Balanced',\n  BatterySaver = 'BatterySaver',\n  BetterBattery = 'BetterBattery',\n  GameMode = 'GameMode',\n  HighPerformance = 'HighPerformance',\n  MaxPerformance = 'MaxPerformance',\n  MixedReality = 'MixedReality',\n}\n\ninterface Battery {\n    // Static info\n    vendor: string | null;\n    model: string | null;\n    serialNumber: string | null;\n    technology: string;\n\n    // Common information\n    state: string;\n    capacity: number;\n    temperature: number | null;\n    percentage: number;\n    cycleCount: number | null;\n    smartCharging: boolean;\n\n    // Energy stats\n    energy: number;\n    energyFull: number;\n    energyFullDesign: number;\n    energyRate: number;\n    voltage: number;\n\n    // Charge stats\n    timeToFull: number | null;\n    timeToEmpty: number | null;\n}\n\nconst power: PowerStatus;\nconst powerPlan: PowerPlan;\nconst batteries: Battery[];\nconst battery: Battery | null;\n```",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "id": {
          "description": "Id to identify the item, should be unique.",
          "type": "string",
          "default": ""
        },
        "onClick": {
          "description": "Deprecated use `onClickV2` instead.",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "onClickV2": {
          "description": "This code will be parsed and executed when the item is clicked.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Power Item Scope\n```ts\ninterface PowerStatus {\n    acLineStatus: number;\n    batteryFlag: number;\n    batteryLifePercent: number;\n    systemStatusFlag: number;\n    batteryLifeTime: number;\n    batteryFullLifeTime: number;\n}\n\nenum PowerPlan {\n  Balanced = 'Balanced',\n  BatterySaver = 'BatterySaver',\n  BetterBattery = 'BetterBattery',\n  GameMode = 'GameMode',\n  HighPerformance = 'HighPerformance',\n  MaxPerformance = 'MaxPerformance',\n  MixedReality = 'MixedReality',\n}\n\ninterface Battery {\n    // Static info\n    vendor: string | null;\n    model: string | null;\n    serialNumber: string | null;\n    technology: string;\n\n    // Common information\n    state: string;\n    capacity: number;\n    temperature: number | null;\n    percentage: number;\n    cycleCount: number | null;\n    smartCharging: boolean;\n\n    // Energy stats\n    energy: number;\n    energyFull: number;\n    energyFullDesign: number;\n    energyRate: number;\n    voltage: number;\n\n    // Charge stats\n    timeToFull: number | null;\n    timeToEmpty: number | null;\n}\n\nconst power: PowerStatus;\nconst powerPlan: PowerPlan;\nconst batteries: Battery[];\nconst battery: Battery | null;\n```",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "remoteData": {
          "description": "Remote data to be added to the item scope.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/RemoteDataDeclaration"
          },
          "default": {}
        },
        "style": {
          "description": "Styles to be added to the item. This follow the same interface of React's `style` prop.",
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/$defs/StyleValue"
              },
              {
                "type": "null"
              }
            ]
          },
          "default": {}
        },
        "template": {
          "description": "Content to display in the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Power Item Scope\n```ts\ninterface PowerStatus {\n    acLineStatus: number;\n    batteryFlag: number;\n    batteryLifePercent: number;\n    systemStatusFlag: number;\n    batteryLifeTime: number;\n    batteryFullLifeTime: number;\n}\n\nenum PowerPlan {\n  Balanced = 'Balanced',\n  BatterySaver = 'BatterySaver',\n  BetterBattery = 'BetterBattery',\n  GameMode = 'GameMode',\n  HighPerformance = 'HighPerformance',\n  MaxPerformance = 'MaxPerformance',\n  MixedReality = 'MixedReality',\n}\n\ninterface Battery {\n    // Static info\n    vendor: string | null;\n    model: string | null;\n    serialNumber: string | null;\n    technology: string;\n\n    // Common information\n    state: string;\n    capacity: number;\n    temperature: number | null;\n    percentage: number;\n    cycleCount: number | null;\n    smartCharging: boolean;\n\n    // Energy stats\n    energy: number;\n    energyFull: number;\n    energyFullDesign: number;\n    energyRate: number;\n    voltage: number;\n\n    // Charge stats\n    timeToFull: number | null;\n    timeToEmpty: number | null;\n}\n\nconst power: PowerStatus;\nconst powerPlan: PowerPlan;\nconst batteries: Battery[];\nconst battery: Battery | null;\n```",
          "type": "string",
          "default": ""
        },
        "tooltip": {
          "description": "Content to display in tooltip of the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Power Item Scope\n```ts\ninterface PowerStatus {\n    acLineStatus: number;\n    batteryFlag: number;\n    batteryLifePercent: number;\n    systemStatusFlag: number;\n    batteryLifeTime: number;\n    batteryFullLifeTime: number;\n}\n\nenum PowerPlan {\n  Balanced = 'Balanced',\n  BatterySaver = 'BatterySaver',\n  BetterBattery = 'BetterBattery',\n  GameMode = 'GameMode',\n  HighPerformance = 'HighPerformance',\n  MaxPerformance = 'MaxPerformance',\n  MixedReality = 'MixedReality',\n}\n\ninterface Battery {\n    // Static info\n    vendor: string | null;\n    model: string | null;\n    serialNumber: string | null;\n    technology: string;\n\n    // Common information\n    state: string;\n    capacity: number;\n    temperature: number | null;\n    percentage: number;\n    cycleCount: number | null;\n    smartCharging: boolean;\n\n    // Energy stats\n    energy: number;\n    energyFull: number;\n    energyFullDesign: number;\n    energyRate: number;\n    voltage: number;\n\n    // Charge stats\n    timeToFull: number | null;\n    timeToEmpty: number | null;\n}\n\nconst power: PowerStatus;\nconst powerPlan: PowerPlan;\nconst batteries: Battery[];\nconst battery: Battery | null;\n```",
          "type": [
            "string",
            "null"
          ],
          "default": null
        }
      }
    },
    "RemoteDataDeclaration": {
      "type": "object",
      "properties": {
        "requestInit": {
          "anyOf": [
            {
              "$ref": "#/$defs/TsUnknown"
            },
            {
              "type": "null"
            }
          ]
        },
        "updateIntervalSeconds": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0
        },
        "url": {
          "type": "string",
          "format": "uri"
        }
      },
      "required": [
        "url"
      ]
    },
    "ResourceId": {
      "description": "Visual id composed of the creator username and the resource name. e.g. `@username/resource-name`",
      "type": "string"
    },
    "SettingsToolbarItem": {
      "type": "object",
      "properties": {
        "badge": {
          "description": "Badge will be displayed over the item, useful as notifications.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Settings Item Scope\nthis module does no expand the scope of the item",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "id": {
          "description": "Id to identify the item, should be unique.",
          "type": "string",
          "default": ""
        },
        "onClick": {
          "description": "Deprecated use `onClickV2` instead.",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "onClickV2": {
          "description": "This code will be parsed and executed when the item is clicked.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Settings Item Scope\nthis module does no expand the scope of the item",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "remoteData": {
          "description": "Remote data to be added to the item scope.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/RemoteDataDeclaration"
          },
          "default": {}
        },
        "style": {
          "description": "Styles to be added to the item. This follow the same interface of React's `style` prop.",
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/$defs/StyleValue"
              },
              {
                "type": "null"
              }
            ]
          },
          "default": {}
        },
        "template": {
          "description": "Content to display in the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Settings Item Scope\nthis module does no expand the scope of the item",
          "type": "string",
          "default": ""
        },
        "tooltip": {
          "description": "Content to display in tooltip of the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Settings Item Scope\nthis module does no expand the scope of the item",
          "type": [
            "string",
            "null"
          ],
          "default": null
        }
      }
    },
    "StyleValue": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "number"
        }
      ]
    },
    "TextToolbarItem": {
      "type": "object",
      "properties": {
        "badge": {
          "description": "Badge will be displayed over the item, useful as notifications.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Base Item Scope\nHave all icons defined on [React Icons](https://react-icons.github.io/react-icons) as properties of the object.\n```js\nconst icon: object;\n```\nHaves all environment variables defined on the system as properties of the object.\n```js\nconst env: object;\n```\nFunctions to add images to the item.\n```js\nfunction getIcon(name: string, size: number = 16): string\nfunction imgFromUrl (url: string, size: number = 16): string\nfunction imgFromPath (path: string, size: number = 16): string\nfunction imgFromExe (exe_path: string, size: number = 16): string\nfunction t(path: string): string\n```",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "id": {
          "description": "Id to identify the item, should be unique.",
          "type": "string",
          "default": ""
        },
        "onClick": {
          "description": "Deprecated use `onClickV2` instead.",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "onClickV2": {
          "description": "This code will be parsed and executed when the item is clicked.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Base Item Scope\nHave all icons defined on [React Icons](https://react-icons.github.io/react-icons) as properties of the object.\n```js\nconst icon: object;\n```\nHaves all environment variables defined on the system as properties of the object.\n```js\nconst env: object;\n```\nFunctions to add images to the item.\n```js\nfunction getIcon(name: string, size: number = 16): string\nfunction imgFromUrl (url: string, size: number = 16): string\nfunction imgFromPath (path: string, size: number = 16): string\nfunction imgFromExe (exe_path: string, size: number = 16): string\nfunction t(path: string): string\n```",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "remoteData": {
          "description": "Remote data to be added to the item scope.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/RemoteDataDeclaration"
          },
          "default": {}
        },
        "style": {
          "description": "Styles to be added to the item. This follow the same interface of React's `style` prop.",
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/$defs/StyleValue"
              },
              {
                "type": "null"
              }
            ]
          },
          "default": {}
        },
        "template": {
          "description": "Content to display in the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Base Item Scope\nHave all icons defined on [React Icons](https://react-icons.github.io/react-icons) as properties of the object.\n```js\nconst icon: object;\n```\nHaves all environment variables defined on the system as properties of the object.\n```js\nconst env: object;\n```\nFunctions to add images to the item.\n```js\nfunction getIcon(name: string, size: number = 16): string\nfunction imgFromUrl (url: string, size: number = 16): string\nfunction imgFromPath (path: string, size: number = 16): string\nfunction imgFromExe (exe_path: string, size: number = 16): string\nfunction t(path: string): string\n```",
          "type": "string",
          "default": ""
        },
        "tooltip": {
          "description": "Content to display in tooltip of the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Base Item Scope\nHave all icons defined on [React Icons](https://react-icons.github.io/react-icons) as properties of the object.\n```js\nconst icon: object;\n```\nHaves all environment variables defined on the system as properties of the object.\n```js\nconst env: object;\n```\nFunctions to add images to the item.\n```js\nfunction getIcon(name: string, size: number = 16): string\nfunction imgFromUrl (url: string, size: number = 16): string\nfunction imgFromPath (path: string, size: number = 16): string\nfunction imgFromExe (exe_path: string, size: number = 16): string\nfunction t(path: string): string\n```",
          "type": [
            "string",
            "null"
          ],
          "default": null
        }
      }
    },
    "ToolbarItem": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "text"
            }
          },
          "$ref": "#/$defs/TextToolbarItem",
          "required": [
            "type"
          ]
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "generic"
            }
          },
          "$ref": "#/$defs/GenericToolbarItem",
          "required": [
            "type"
          ]
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "date"
            }
          },
          "$ref": "#/$defs/DateToolbarItem",
          "required": [
            "type"
          ]
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "power"
            }
          },
          "$ref": "#/$defs/PowerToolbarItem",
          "required": [
            "type"
          ]
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "keyboard"
            }
          },
          "$ref": "#/$defs/KeyboardToolbarItem",
          "required": [
            "type"
          ]
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "network"
            }
          },
          "$ref": "#/$defs/NetworkToolbarItem",
          "required": [
            "type"
          ]
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "bluetooth"
            }
          },
          "$ref": "#/$defs/BluetoothToolbarItem",
          "required": [
            "type"
          ]
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "media"
            }
          },
          "$ref": "#/$defs/MediaToolbarItem",
          "required": [
            "type"
          ]
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "user"
            }
          },
          "$ref": "#/$defs/UserToolbarItem",
          "required": [
            "type"
          ]
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "notifications"
            }
          },
          "$ref": "#/$defs/NotificationsToolbarItem",
          "required": [
            "type"
          ]
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "tray"
            }
          },
          "$ref": "#/$defs/TrayToolbarItem",
          "required": [
            "type"
          ]
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "device"
            }
          },
          "$ref": "#/$defs/DeviceToolbarItem",
          "required": [
            "type"
          ]
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "settings"
            }
          },
          "$ref": "#/$defs/SettingsToolbarItem",
          "required": [
            "type"
          ]
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "hwinfo"
            }
          },
          "$ref": "#/$defs/HwinfoToolbarItem",
          "required": [
            "type"
          ]
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "workspaces"
            }
          },
          "$ref": "#/$defs/WorkspaceToolbarItem",
          "required": [
            "type"
          ]
        }
      ]
    },
    "ToolbarItem2": {
      "anyOf": [
        {
          "$ref": "#/$defs/PluginId"
        },
        {
          "$ref": "#/$defs/ToolbarItem"
        }
      ]
    },
    "TrayToolbarItem": {
      "type": "object",
      "properties": {
        "badge": {
          "description": "Badge will be displayed over the item, useful as notifications.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Workspace Item Scope\nthis module does no expand the scope of the item",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "id": {
          "description": "Id to identify the item, should be unique.",
          "type": "string",
          "default": ""
        },
        "onClick": {
          "description": "Deprecated use `onClickV2` instead.",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "onClickV2": {
          "description": "This code will be parsed and executed when the item is clicked.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Workspace Item Scope\nthis module does no expand the scope of the item",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "remoteData": {
          "description": "Remote data to be added to the item scope.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/RemoteDataDeclaration"
          },
          "default": {}
        },
        "style": {
          "description": "Styles to be added to the item. This follow the same interface of React's `style` prop.",
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/$defs/StyleValue"
              },
              {
                "type": "null"
              }
            ]
          },
          "default": {}
        },
        "template": {
          "description": "Content to display in the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Workspace Item Scope\nthis module does no expand the scope of the item",
          "type": "string",
          "default": ""
        },
        "tooltip": {
          "description": "Content to display in tooltip of the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Workspace Item Scope\nthis module does no expand the scope of the item",
          "type": [
            "string",
            "null"
          ],
          "default": null
        }
      }
    },
    "TsUnknown": true,
    "UserToolbarItem": {
      "type": "object",
      "properties": {
        "badge": {
          "description": "Badge will be displayed over the item, useful as notifications.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Notifications Item Scope\n```ts\nconst count: number;\n```",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "id": {
          "description": "Id to identify the item, should be unique.",
          "type": "string",
          "default": ""
        },
        "onClick": {
          "description": "Deprecated use `onClickV2` instead.",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "onClickV2": {
          "description": "This code will be parsed and executed when the item is clicked.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Notifications Item Scope\n```ts\nconst count: number;\n```",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "remoteData": {
          "description": "Remote data to be added to the item scope.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/RemoteDataDeclaration"
          },
          "default": {}
        },
        "style": {
          "description": "Styles to be added to the item. This follow the same interface of React's `style` prop.",
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/$defs/StyleValue"
              },
              {
                "type": "null"
              }
            ]
          },
          "default": {}
        },
        "template": {
          "description": "Content to display in the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Notifications Item Scope\n```ts\nconst count: number;\n```",
          "type": "string",
          "default": ""
        },
        "tooltip": {
          "description": "Content to display in tooltip of the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Notifications Item Scope\n```ts\nconst count: number;\n```",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "withUserFolder": {
          "description": "Show user control popup on click",
          "type": "boolean",
          "default": false
        }
      }
    },
    "WorkspaceToolbarItem": {
      "type": "object",
      "properties": {
        "badge": {
          "description": "Badge will be displayed over the item, useful as notifications.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Workspace Item Scope\nthis module does no expand the scope of the item",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "id": {
          "description": "Id to identify the item, should be unique.",
          "type": "string",
          "default": ""
        },
        "mode": {
          "$ref": "#/$defs/WorkspaceToolbarItemMode",
          "default": "dotted"
        },
        "onClick": {
          "description": "Deprecated use `onClickV2` instead.",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "onClickV2": {
          "description": "This code will be parsed and executed when the item is clicked.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Workspace Item Scope\nthis module does no expand the scope of the item",
          "type": [
            "string",
            "null"
          ],
          "default": null
        },
        "remoteData": {
          "description": "Remote data to be added to the item scope.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/$defs/RemoteDataDeclaration"
          },
          "default": {}
        },
        "style": {
          "description": "Styles to be added to the item. This follow the same interface of React's `style` prop.",
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/$defs/StyleValue"
              },
              {
                "type": "null"
              }
            ]
          },
          "default": {}
        },
        "template": {
          "description": "Content to display in the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Workspace Item Scope\nthis module does no expand the scope of the item",
          "type": "string",
          "default": ""
        },
        "tooltip": {
          "description": "Content to display in tooltip of the item.\n\nShould follow the [mathjs expression syntax](https://mathjs.org/docs/expressions/syntax.html).\n\n## Workspace Item Scope\nthis module does no expand the scope of the item",
          "type": [
            "string",
            "null"
          ],
          "default": null
        }
      }
    },
    "WorkspaceToolbarItemMode": {
      "type": "string",
      "enum": [
        "dotted",
        "named",
        "numbered"
      ]
    }
  }
}